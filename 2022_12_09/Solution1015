package study2022_12_09;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;

public class Solution1015 {
	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		int caseNum = Integer.parseInt(bf.readLine());
		StringTokenizer st = new StringTokenizer(bf.readLine());
		int[] arr = new int[caseNum];
		int[] arr2 = new int[caseNum];
		TreeMap<Integer, Integer> treeMap = new TreeMap<>();
		int i=0;
		// treemap으로 한 이유는 정렬이 자동으로 되어서
		while(st.hasMoreElements()) {
			int num = Integer.parseInt(st.nextToken());
			arr[i] = num;
			i++;
			treeMap.put(num, treeMap.getOrDefault(num, 0) + 1);
		}

		Set<Map.Entry<Integer, Integer>> sets = treeMap.entrySet();
		int cnt = 0;
		// 배열의 숫자의 인덱스를 맞추기 위해 앞부터 cnt의 값을 더해줌.
		// 1 -> 5개 2-> 4개 3-> 1 4->5개
		// treemap => 1:5 -> 0~4 -> 2:5+4 -> 9 -1 8 -> 3 -> 5+4+1 -> 10-1 9 ...
		for(Map.Entry<Integer, Integer> set : sets) {
			cnt += set.getValue();
			treeMap.put(set.getKey(), cnt);
		}
		// 뒤에서부터 해당 숫자의 배열에 있는 값에서 1을 빼줌. -> 원소 번호가 0부터 시작이기 때문
		// 1 1 1 1 1 2 2 2 2 3 4  4  4  4  4
		// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
		// 1 : 5, 2 : 9, 3 : 10, 4 : 14
		for(int j=arr.length-1; j>=0; j--) {
			// j = 14 treeMap.get(4) - 1 -> 14 -> arr2[14] = 14;
			// j = 13 treeMap.get(4) - 1 -> 14 -> arr2[14] = 13;
			arr2[j] = treeMap.get(arr[j]) -1;
			// 해당 숫자의 배열에서 개수에서 1을 빼줌
			treeMap.put(arr[j], treeMap.get(arr[j]) - 1);
		}
		// 마지막 빼고 띄어쓰기 출력
		for(int j=0; j<arr2.length; j++) {
			if(j == arr2.length-1){
				System.out.print(arr2[j]);
			} else {
				System.out.print(arr2[j] + " ");
			}
		}
	}
}
